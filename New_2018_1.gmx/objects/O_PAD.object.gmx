<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>B_PAD</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_view_x = x;

_mbp = false;

_M_Left = false;
_M_Right = false;

_C_Left = false;
_C_Right = false;

_Delay = 0;

key_on = 0;

joystick = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_Bac_delay = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global._hp</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if global.inventory_on == -1{
if keyboard_check(ord("A")) &amp;&amp; key_on != 1{
key_on = -1;
if _M_Right == true{O_Player.image_index = 0}
_M_Right = false;
_M_Left = true;
}
if keyboard_check(ord("D")) &amp;&amp; key_on != -1{
key_on = 1;
if _M_Left == true{O_Player.image_index = 0}
_M_Left = false;
_M_Right = true;
}
if keyboard_check_released(ord("A")) &amp;&amp; key_on == -1{
//O_Player.m_dir = 0;
key_on = 0;
}
if keyboard_check_released(ord("D")) &amp;&amp; key_on == 1{
//O_Player.m_dir = 0
key_on = 0;
}

if !keyboard_check(ord("A")) &amp;&amp; !keyboard_check(ord("D")) {
_M_Right = false;
_M_Left = false;
key_on = 0;
}

if mouse_check_button(mb_right){
if global.st &gt;= 30{
with(O_Player){
if _booster &lt;= 5{
if onGround{
_booster = 38;
}else{
_booster = 38;
}

if (onWater &amp;&amp; !(_booster &gt; 0)){
gravRise    = 0.2//3  * m;
gravFall    = 0.2//3  * m;
gravSlide   = 0.05// * m;
jumpHeight  = 4//25  * m;
jumpHeight_c = jumpHeight;
}else{
gravRise    = 0.6//3  * m;
gravFall    = 0.6//3  * m;
gravSlide   = 0.3// * m;
jumpHeight  = 10//25  * m;
jumpHeight_c = jumpHeight;
}

m_Brake = 0;
var point_target = point_direction(O_Player.x,O_Player.y,O_Player_target.x,O_Player_target.y);
_xspd = lengthdir_x(28,point_target);
_jump_xscale = 1 + abs(_xspd/30);
yscale -= abs(_xspd/30);

if (-(jumpHeight * 1.8) &gt; -lengthdir_y(28,point_target)){
_yspd = jumpHeight * 1.8;
yscale = 1 + abs(_yspd/30);
_jump_xscale -= abs(_yspd/30);
}
else{
if (-(jumpHeight * 1.8) &gt; lengthdir_y(28,point_target)){
_yspd = -(jumpHeight * 1.8);
yscale = 1 + abs(_yspd/30);
_jump_xscale -= abs(_yspd/30);
}
else{
_yspd = lengthdir_y(28,point_target);
yscale = 1 + abs(_yspd/30);
_jump_xscale -= abs(_yspd/30);
}
}
global.st -= 30;
global.st_delay = 90;
}
}
}
}

if keyboard_check(vk_space) || keyboard_check(ord("W")){
if O_Player._Jump &lt;= 0
&amp;&amp; (O_Player.jumpByGround || O_Player.onGround || O_Player.onUpGround || O_Player.onWater)
&amp;&amp; (O_Player.jumpByGround)
{
if keyboard_check(ord("S")) &amp;&amp; O_Player.onUpGround{
O_Player._Down_Jump = 1;
}
else{
O_Player._Down_Jump = 0;
}
O_Player.kJump = true;
}
}
if keyboard_check(ord("S")){
if O_Player.onWater{
O_Player._yspd += (O_Player.maxV - O_Player._yspd)/10;
}
}
if keyboard_check_pressed(ord("R")){
if O_Player_Stick._bullet[OBJ_Inv_UI._eqmWeapon_save] &lt; O_Player_Stick._bullet_max[OBJ_Inv_UI._eqmWeapon_save]
O_Player_Stick._reload = 1;
}
}

if keyboard_check_pressed(vk_tab) &amp;&amp; global.inventory_on &lt; 0{
if !instance_exists(OBJ_PAUSE_UI){
instance_create(view_xview+view_wview/2,view_yview+view_hview/2,OBJ_PAUSE_UI);
global.pause_mode = 1;
global.inventory_on = -2;
}
else{
with(OBJ_PAUSE_UI){pause_off = 1;global.inventory_on = -1;}
}
}

if keyboard_check_pressed(vk_escape){
if !instance_exists(OBJ_OP_UI) &amp;&amp; !instance_exists(O_POP_PARENT){
instance_create(view_xview+view_wview/2,view_yview+view_hview,OBJ_OP_UI);
}
}

if keyboard_check_pressed(ord("I")) &amp;&amp; (global.inventory_on != -2){
if !instance_exists(O_POP_PARENT) &amp;&amp; !instance_exists(OBJ_OP_UI){
global.inventory_on *= -1;
}
}
//x = max(view_xview+200-(100),view_xview+200+(100));
/*
if (device_mouse_check_button(0,mb_left)) &amp;&amp; 
(collision_point(device_mouse_x(0),device_mouse_y(0),self,1,0))
{
_mbp = true;
joystick = 0;
}
if (device_mouse_check_button(1,mb_left)) &amp;&amp; 
(collision_point(device_mouse_x(1),device_mouse_y(1),self,1,0))
{
_mbp = true;
joystick = 1;
}
if (device_mouse_check_button(2,mb_left)) &amp;&amp; 
(collision_point(device_mouse_x(2),device_mouse_y(2),self,1,0))
{
_mbp = true;
joystick = 2;
}
if (device_mouse_check_button(3,mb_left)) &amp;&amp; 
(collision_point(device_mouse_x(3),device_mouse_y(3),self,1,0))
{
_mbp = true;
joystick = 3;
}
if device_mouse_check_button_released(joystick,mb_left) &amp;&amp; O_Player._Jump == 0 &amp;&amp; O_Player._ATTACKING == 0
{
O_Player.m_dir = 0
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if (device_mouse_check_button(joystick,mb_left)) &amp;&amp; _mbp = true{
if x &gt; view_xview+120+10{
if _Delay &lt; 5{_Delay+=1;}
if _M_Left == true{O_Player.m_Brake = 10;O_Player.image_index = 0}
_M_Right = true;
_M_Left = false;
}
else
if x &lt; view_xview+120-10{
if _Delay &gt; -5{_Delay-=1;}
if _M_Right == true{O_Player.m_Brake = 10;O_Player.image_index = 0}
_M_Left = true;
_M_Right = false;
}
else{
//_M_Right = false;_M_Left = false;
}
_view_x = max(min(device_mouse_x(joystick),view_xview+120+50),min(x+view_xview,view_xview+120-(50)));
draw_sprite_ext(sprite_index,0,_view_x,view_yview+view_hview-25,1,1,0,c_white,1);
}
else{
_view_x = view_xview+120;
draw_sprite_ext(sprite_index,0,view_xview+120,view_yview+view_hview-25,1,1,0,c_white,1);
}

//draw_set_font(font0);
//draw_text_colour(O_Player.x,O_Player.y,joystick,c_red,c_red,c_red,c_red,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
