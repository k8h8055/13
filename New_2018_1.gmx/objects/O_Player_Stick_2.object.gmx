<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_weapon_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-163</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = O_Player.x;
y = O_Player.y;

_xscale = 1;

_rot = -5;

_rot_check = 1;

_rot_on = 0;

_rot_scale = 0;

_Weapon_switch = 1;

_long_sword = 0;
_sword = 0;
_gun = 0;
_AR_gun = 0;
_SG_gun = 0;

_xpos = 0;
_xpos_save = 0;
_ypos = 0;
_ypos_save = 0;

_attack = 0;
_attack_2 = 0;

_attack_Delay = 0;
_attack_Delay_max = 60
_attack_Delay_2 = 0;
_attack_Delay_max_2 = 60;
_attack_delay_next = 15;

_attack_angle = 0;
_attack_angle_2 = 0;
_atttack_total = 0;
check_x = 0;
check_y = 0;

check_x_pos = 0;
check_y_pos = 0;

check_xscale = 1;

eff_delay = 0;

angle = 0;

range_max = 200;
angle_speed = 4;

img_scales = 0;

_ypos_index = 0;

angles = 0;
img_weapon_scale = 1;

_bullet_max = 0;
for(i=0;i&lt;1;i++){
_bullet[i] = 0;
_bullet_max[i] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if _attack_Delay &gt; _attack_Delay_max/2.5{
audio_play_sound(att_AR_gun_at_0_wv,0,0);
/*
if O_Player._xspd &gt; 0{
is = instance_create(x+lengthdir_x(sprite_width/2+O_Player.xscale*5,image_angle-check_xscale*10)
+_xpos+O_Player._xspd*5,
y+lengthdir_y(sprite_width/2,image_angle)+_ypos-10,O_FIRE_ATT_AR_M);
}
*/
//else{
is = instance_create(x+_xscale*lengthdir_x(sprite_width*0.6,image_angle+_xscale*5)+O_Player._xspd*2,
y+lengthdir_y(sprite_width*0.6,_xscale*image_angle + 5),O_FIRE_ATT_AR_M);
//}

is._dir = _xscale;
is.image_angle = image_angle-_xscale*5;
_xpos -= (2);
_ypos -= 0.1;
O_Player.rot += _xscale*4;
alarm[1] = 5;
_attack_Delay -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_long_sword = 0;
_sword = 0;
_gun = 0;

_ypos_index = 0;

switch(O_Player.character){
case 4 : _ypos_index = 5;break;
}

switch(_Weapon_switch){
case 0 : sprite_index = spr_weapon_1;
_long_sword = 1;
_attack_angle = 220;
_attack_angle_2 = -45;
_attack_Delay_max = 60
_attack_Delay_max_2 = 60;
_attack_delay_next = 30;

range_max = 200;

_xpos = 0;
_ypos = 10;
_rot_on = -40;
angle_speed = 2;
break;
case 1 : sprite_index = spr_gun_1;
//it._Weapon_switch = _Weapon_switch;
_gun = 1;
_attack_angle = -25;
_attack_angle_2 = 0;
_attack_Delay_max = 15;
_attack_Delay_max_2 = 15;
_attack_delay_next = 15;
range_max = 400;
_xpos = 2;
_ypos = 15;
_rot_on = 0;
angle_speed = 4;
_bullet_max = 20;
break;
case 2 : sprite_index = spr_AR_gun_1;
_AR_gun = 1;
_attack_angle = -15;
_attack_angle_2 = 0;
_attack_Delay_max = 50;
_attack_Delay_max_2 = 10;
range_max = 400;
_xpos = -6;
_ypos = 8;
_rot_on = 5;
angle_speed = 5;
break;

case 3 : sprite_index = spr_SG_gun_1;
_SG_gun = 1;
_attack_angle = -40;
_attack_angle_2 = 0;
_attack_Delay_max = 80;
_attack_Delay_max_2 = 80;
range_max = 400;
_xpos = 8;
_ypos = 2;
_rot_on = 0;
angle_speed = 5;
break;
}

_ypos_save = _ypos;
_xpos_save = _xpos;

_bullet_max[OBJ_Inv_UI._eqmWeapon_save] = _bullet_max;

if _xscale == 1{
_rot_scale = 0;
}
if _xscale == -1{
_rot_scale = _rot_on + (_rot_on + 180);
}
image_angle = point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale) - _rot;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sign(O_Player._xspd) == O_Player.xscale) || O_Player._xspd == 0{ 
x = O_Player.x+(_xpos * _xscale);}
else{
x = O_Player.x+(_xpos * _xscale) + O_Player._xspd*2;
}
y = O_Player.y+_ypos+_ypos_index;

_xpos += (_xpos_save - _xpos)/30;
_ypos += (_ypos_save - _ypos)/30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.inventory_on</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>_Weapon_switch</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>4</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global._hp</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 어택 움직임 
/*
if _attack_Delay &gt; 0{
_xscale = O_Player.xscale;
check_x = O_Player_target.x
check_y = O_Player_target.y
check_x_pos = x;
check_y_pos = y;
check_xscale = _xscale;

if _xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)){
_rot_scale = 0;
check_xscale = _xscale;
if _long_sword == 1
image_angle = image_angle + 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle));
}

if _xscale == -1 &amp;&amp; (_rot_scale == 0){
_rot_scale = _rot_on + (_rot_on + 180);
check_xscale = _xscale;

if _long_sword == 1
image_angle = image_angle - 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle));
}
if image_angle - (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) - image_angle)/2{
image_angle -= 360;
}
else{
if (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) - image_angle)/2{
image_angle += 360;
}
}
if !(_attack_Delay &lt; _attack_Delay_max/2 &amp;&amp; _SG_gun == 1){
image_angle += ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) - image_angle)/2
}
//image_angle += ((point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale) - (_xscale * _attack_angle)) - image_angle)/5

if (_attack_Delay &lt; _attack_Delay_max/2  &amp;&amp; _SG_gun == 1){
image_angle += ((point_direction(x,y,O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale)) - image_angle)/2;
}
if _attack_Delay_max == _attack_Delay{
//image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale));

if _SG_gun == 1{
audio_play_sound(att_SG_gun_at_0_wv,0,0);
var _image_angle = O_Player_Stick.image_angle;
var _dirs = O_Player_Stick._xscale;

for(i=0;i&lt;5;i++){
it = instance_create(x+_xscale*lengthdir_x(sprite_width*0.4,image_angle),
y+lengthdir_y(sprite_width*0.4,_xscale*image_angle),O_FIRE_ATT);
it.image_angle = _image_angle+(i*4);
it._speed = 30;
it._dir = _dirs;
}
for(i=0;i&lt;5;i++){
it = instance_create(x+_xscale*lengthdir_x(sprite_width*0.4,image_angle),
y+lengthdir_y(sprite_width*0.4,_xscale*image_angle),O_FIRE_ATT);
it.image_angle = _image_angle-(i*4);
it._speed = 30;
it._dir = _dirs;
}

_xpos -= (25);
_ypos -= 10;
O_Player.rot += _xscale * 45;
O_Player.m_Brake = 30;
O_Player._xspd = -_xscale * 8;
}
else if _AR_gun = 1{
image_angle = (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale))
alarm[1] = 5;
}
else{
if _gun == 1{
var _att_dir = (point_direction(x,y, O_Player_target.x,O_Player_target.y));
audio_play_sound(att_gun_at_0_wv,0,0);
is = instance_create(x+_xscale*lengthdir_x(_xscale*sprite_width*1,_att_dir)+O_Player._xspd*2,
y+lengthdir_y(sprite_width*1,_att_dir),O_FIRE_ATT_M);
is._dir = _xscale;
is.image_angle = _att_dir;
}else{
audio_play_sound(att_sword_swing_wv,0,0);
if check_xscale = 1{
ITs = instance_create(x+_xscale * 125,y,O_Player_Stick_meff);
ITs._xscale = check_xscale;
ITs.image_angle = image_angle-_attack_angle_2-90;
}else{
ITs = instance_create(x+_xscale * 125,y,O_Player_Stick_meff);
ITs._xscale = check_xscale;
ITs.image_angle = image_angle + _attack_angle_2 + 90 + 180;
}
}
}
}
if eff_delay == 0 &amp;&amp; _attack_Delay &gt; _attack_Delay_max-10{

if (_SG_gun = 0 &amp;&amp; _AR_gun = 0){
if _gun == 1{
_xpos -= _xscale*1;
_ypos -= 1;
}else{
if collision_rectangle(x+lengthdir_x(sprite_height,image_angle+90),y+lengthdir_y(sprite_height,image_angle+90),x,y,O_ENEMY_P,1,0){
target_en = collision_rectangle(x+lengthdir_x(sprite_height,image_angle+90),y+lengthdir_y(sprite_height,image_angle+90),x,y,O_ENEMY_P,1,0);
if instance_exists(target_en){
if target_en.Damage &lt;= 0{
O_Camera.screenShake = 3;
audio_play_sound(att_sword_0_wv,0,0);
target_en._HP -= 1;
target_en.x_pos_max += _xscale * 20;
target_en.x_pos_go = 20;
target_en.Damage = 10;
target_en._Jumping_damage = 1;
}
}
}
}
}
if !(_xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)))
&amp;&amp; !(_xscale == -1 &amp;&amp; (_rot_scale == 0)){
it2 = instance_create(x,y,O_Player_Stick_eff);
it2.sprite_index = sprite_index;
it2.image_angle = image_angle;
it2.image_xscale = check_xscale;
it2.depth = depth+1;
}
eff_delay = 1;
}
}
else{
if _attack_Delay_2 &gt; 0 &amp;&amp; _gun == 1{
_xscale = O_Player.xscale;

if _xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)){
_rot_scale = 0;
image_angle = (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale));
}

if _xscale == -1 &amp;&amp; (_rot_scale == 0){
_rot_scale = _rot_on + (_rot_on + 180);

image_angle = (point_direction(x,y,O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale));
}
if image_angle - (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale)) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale)) - image_angle)/2{
image_angle -= 360;
}
else{
if (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale)) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale)) - image_angle)/2{
image_angle += 360;
}
}
image_angle += ((point_direction(x,y,O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale)) - image_angle)/2;
}

if _attack_Delay_2 &gt; 0 &amp;&amp; _gun == 0 &amp;&amp; _AR_gun = 0 _SG_gun = 0{
_xscale = O_Player.xscale;
check_x = O_Player_target.x
check_y = O_Player_target.y
check_x_pos = x;
check_y_pos = y;
check_xscale = _xscale;

if _xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)){
_rot_scale = 0;
check_xscale = _xscale;
if _long_sword == 1
image_angle = image_angle + 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2));
}

if _xscale == -1 &amp;&amp; (_rot_scale == 0){
_rot_scale = _rot_on + (_rot_on + 180);
check_xscale = _xscale;
if _long_sword == 1
image_angle = image_angle - 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2));
}
if image_angle - (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) - image_angle)/2{
image_angle -= 360;
}
else{
if (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) - image_angle)/2{
image_angle += 360;
}
}
image_angle += ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) - image_angle)/2

if _attack_Delay_max_2 == _attack_Delay_2 &amp;&amp; _long_sword = 1{
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle));
audio_play_sound(att_sword_swing_wv,0,0);
if check_xscale = 1{
IT = instance_create(x+check_xscale * 125,y-sprite_height/3,O_Player_Stick_meff);
IT._xscale = check_xscale;
IT.image_angle = image_angle + _attack_angle;
}else{
IT = instance_create(x+check_xscale * 125,y-sprite_height/3,O_Player_Stick_meff);
IT._xscale = check_xscale;
IT.image_angle = image_angle + _attack_angle + 90;
}
}
if eff_delay == 0 &amp;&amp; _attack_Delay_2 &gt; _attack_Delay_max_2 - 10{
if collision_rectangle(x+lengthdir_x(sprite_height,image_angle+90),y+lengthdir_y(sprite_height,image_angle+90),x,y,O_ENEMY_P,1,0){
target_en = collision_rectangle(x+lengthdir_x(sprite_height,image_angle+90),y+lengthdir_y(sprite_height,image_angle+90),x,y,O_ENEMY_P,1,0);
if instance_exists(target_en){
if target_en.Damage &lt;= 0{
O_Camera.screenShake = 3;
audio_play_sound(att_sword_1_wv,0,0);
target_en._HP -= 1;
target_en.x_pos_max += _xscale * 20;
target_en.x_pos_go = 20;
target_en.Damage = 10;
target_en._Jumping_damage = 1;
}
}
}
if !(_xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)))
&amp;&amp; !(_xscale == -1 &amp;&amp; (_rot_scale == 0)){
it = instance_create(x,y,O_Player_Stick_eff);
it.image_angle = image_angle;
it.sprite_index = sprite_index;
it.depth = depth + 1;
it._xscale = check_xscale;
}
eff_delay = 1;
}
}
}

if _attack_Delay &gt; 0{
_attack_Delay -= 1;
}
if _attack_Delay_2 &gt; 0{
_attack_Delay_2 -= 1;
}

if eff_delay &gt; 0{
eff_delay -= 1;
}

/*
if image_angle - (point_direction(check_x_pos,check_y_pos,check_x,check_y)-(_rot_on - _rot_scale) - _rot) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(check_x_pos,check_y_pos,check_x,check_y)-(_rot_on - _rot_scale) - _rot) - image_angle)/10{
image_angle -= 360;
}
else{
if (point_direction(check_x_pos,check_y_pos,check_x,check_y)-(_rot_on - _rot_scale) - _rot) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(check_x_pos,check_y_pos,check_x,check_y)-(_rot_on - _rot_scale) - _rot) - image_angle)/10{
image_angle += 360;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 기본 움직임 
/*
if _rot_scale == 0 &amp;&amp; _xscale == -1{
_rot_scale = _rot_on - 200;
}
else{
if _rot_scale == _rot_on - 200 &amp;&amp; _xscale == 1{
_rot_scale = 0;
}
}
*/

_xscale = O_Player.xscale;

if _attack_Delay &lt;= 0 &amp;&amp; _attack_Delay_2 &lt;= 0{

if _xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)){
_rot_scale = 0;

image_angle = (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale))
}
if _xscale == -1 &amp;&amp; (_rot_scale == 0){
_rot_scale = _rot_on + (_rot_on + 180);
image_angle = (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale))
}

if image_angle - (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale) - _rot) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale) - _rot) - image_angle)/2{
image_angle -= 360;
}
else{
if (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale) - _rot) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale) - _rot) - image_angle)/2{
image_angle += 360;
}
}

image_angle += ((point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale) - _rot) - image_angle)/2;



if _rot_check == 1 &amp;&amp; _rot &lt; 5{
//_rot += 0.1;
}else{
_rot_check = 2;
}

if _rot_check == 2 &amp;&amp; _rot &gt; -5{
//_rot -= 0.1;
}else{
_rot_check = 1;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 어택 움직임 
if _attack_Delay &gt; 0{
_xscale = O_Player.xscale;

check_x = O_Player_target.x
check_y = O_Player_target.y
check_x_pos = x;
check_y_pos = y;
check_xscale = _xscale;

if _xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)){
_rot_scale = 0;
check_xscale = _xscale;
if _long_sword == 1
image_angle = image_angle + 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle));
}

if _xscale == -1 &amp;&amp; (_rot_scale == 0){
_rot_scale = _rot_on + (_rot_on + 180);
check_xscale = _xscale;

if _long_sword == 1
image_angle = image_angle - 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle));
}
if image_angle - (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) - image_angle)/angle_speed{
image_angle -= 360;
}
else{
if (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) - image_angle)/angle_speed{
image_angle += 360;
}
}
if !(_attack_Delay &lt; _attack_Delay_max/2 &amp;&amp; _SG_gun == 1){
image_angle += ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) - image_angle)/angle_speed
}

if (_attack_Delay &lt; _attack_Delay_max/2  &amp;&amp; _SG_gun == 1){
image_angle += ((point_direction(x,y,O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale)) - image_angle)/angle_speed;
}
if _attack_Delay_max == _attack_Delay{
//image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale));

if _SG_gun == 1 {
audio_play_sound(att_SG_gun_at_0_wv,0,0);
var _image_angle = O_Player_Stick.image_angle;
var _dirs = O_Player_Stick._xscale;

for(i=0;i&lt;5;i++){
it = instance_create(x+_xscale*lengthdir_x(sprite_width*0.4,image_angle),
y+lengthdir_y(sprite_width*0.4,_xscale*image_angle),O_FIRE_ATT);
it.image_angle = _image_angle+(i*4);
it._speed = 30;
it._dir = _dirs;
}
for(i=0;i&lt;5;i++){
it = instance_create(x+_xscale*lengthdir_x(sprite_width*0.4,image_angle),
y+lengthdir_y(sprite_width*0.4,_xscale*image_angle),O_FIRE_ATT);
it.image_angle = _image_angle-(i*4);
it._speed = 30;
it._dir = _dirs;
}

_xpos -= (25);
_ypos -= 10;
O_Player.rot += _xscale * 45;
O_Player.m_Brake = 30;
//O_Player._Jump = 0;
if O_Player._booster &gt; 0{
O_Player._xspd = (-_xscale*lengthdir_x(sprite_width*0.4,image_angle))/3;
O_Player._booster = 0;
}else{
if O_Player._Jump &gt; 0
O_Player._xspd += (-_xscale*lengthdir_x(sprite_width*0.4,image_angle))/3;
else
O_Player._xspd = (-_xscale*lengthdir_x(sprite_width*0.4,image_angle))/3;
}
O_Player._yspd += -lengthdir_y(sprite_width*0.4,_xscale*image_angle)/5;
}
else if _AR_gun = 1{
image_angle = (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale));
alarm[1] = 5;
}
else{
if _gun == 1 &amp;&amp; O_Player_Stick._bullet[OBJ_Inv_UI._eqmWeapon_save] &gt; 0{
var _att_dir = (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale));
audio_play_sound(att_gun_at_0_wv,0,0);
is = instance_create(x+lengthdir_x(sprite_width*1.2,_att_dir)+O_Player._xspd*0,
y+lengthdir_y(sprite_width*1.2,_att_dir),O_FIRE_ATT_M);
is._dir = _xscale;
is.image_angle = _att_dir//point_direction(x,y, O_Player_target.x,O_Player_target.y);
O_Player_Stick._bullet[OBJ_Inv_UI._eqmWeapon_save] -= 1;
}else{
var _att_dir = (point_direction(x,y, O_Player_target.x,O_Player_target.y));

//audio_play_sound(att_sword_swing_wv,0,0);
//IT = instance_create(x+_xscale*lengthdir_x(_xscale*sprite_width*1.5,_att_dir)+O_Player._xspd*2,
//y+lengthdir_y(sprite_width*1.5,_att_dir),O_Player_Stick_meff);
//IT._xscale = check_xscale;
//IT.image_angle = _att_dir
}
}
}
if eff_delay == 0 &amp;&amp; _attack_Delay &gt; _attack_Delay_max-10{

if (_SG_gun = 0 &amp;&amp; _AR_gun = 0){
if _gun == 1 &amp;&amp; O_Player_Stick._bullet[OBJ_Inv_UI._eqmWeapon_save] &gt; 0{
_xpos -= _xscale*0.2;
_ypos -= 0.2;
}else{
if collision_rectangle(x+lengthdir_x(sprite_height*1.2,image_angle+90),y+lengthdir_y(sprite_height*1.2,image_angle+90),x,y,O_ENEMY_P,1,0){
target_en = collision_rectangle(x+lengthdir_x(sprite_height*1.2,image_angle+90),y+lengthdir_y(sprite_height*1.2,image_angle+90),x,y,O_ENEMY_P,1,0);
if instance_exists(target_en){
if target_en.Damage &lt;= 0{
O_Camera.screenShake = 3;
audio_play_sound(att_sword_0_wv,0,0);
target_en._HP -= 2;
target_en.x_pos_max += _xscale * 20;
target_en.x_pos_go = 20;
target_en.Damage = 10;
target_en._Jumping_damage = 1;
}
}
}
}
}
if !(_xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)))
&amp;&amp; !(_xscale == -1 &amp;&amp; (_rot_scale == 0)){

it2 = instance_create(x,y,O_Player_Stick_eff);
it2.MyMaster = self;
it2.sprite_index = sprite_index;
it2.angles = image_angle;
it2.image_xscale = _xscale;

}
eff_delay = 1;
}
}
else{
if _attack_Delay_2 &gt; 0 &amp;&amp; _gun == 1 &amp;&amp; O_Player_Stick._bullet[OBJ_Inv_UI._eqmWeapon_save] &gt; 0{
_xscale = O_Player.xscale;

if _xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)){
_rot_scale = 0;
image_angle = (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale));
}

if _xscale == -1 &amp;&amp; (_rot_scale == 0){
_rot_scale = _rot_on + (_rot_on + 180);

image_angle = (point_direction(x,y,O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale));
}
if image_angle - (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale)) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale)) - image_angle)/angle_speed{
image_angle -= 360;
}
else{
if (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale)) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale)) - image_angle)/angle_speed{
image_angle += 360;
}
}
image_angle += ((point_direction(x,y,O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale)) - image_angle)/angle_speed;
}

if _attack_Delay_2 &gt; 0 &amp;&amp; _gun == 0 &amp;&amp; _AR_gun = 0 &amp;&amp; _SG_gun == 0{
_xscale = O_Player.xscale;
check_x = O_Player_target.x
check_y = O_Player_target.y
check_x_pos = x;
check_y_pos = y;
check_xscale = _xscale;

if _xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)){
_rot_scale = 0;
check_xscale = _xscale;
if _long_sword == 1
image_angle = image_angle + 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2));
}

if _xscale == -1 &amp;&amp; (_rot_scale == 0){
_rot_scale = _rot_on + (_rot_on + 180);
check_xscale = _xscale;
if _long_sword == 1
image_angle = image_angle - 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2));
}
if image_angle - (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) - image_angle)/angle_speed{
image_angle -= 360;
}
else{
if (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) - image_angle)/angle_speed{
image_angle += 360;
}
}
image_angle += ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) - image_angle)/angle_speed

if _attack_Delay_max_2 == _attack_Delay_2 &amp;&amp; _long_sword = 1{
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle));
var _att_dir = (point_direction(x,y, O_Player_target.x,O_Player_target.y));
audio_play_sound(att_sword_swing_wv,0,0);

IT = instance_create(x+_xscale*lengthdir_x(_xscale*sprite_width*1.5,_att_dir)+O_Player._xspd*2,
y+lengthdir_y(sprite_width*1.5,_att_dir),O_Player_Stick_meff);
IT._xscale = check_xscale;
IT.image_angle = _att_dir// + _attack_angle;

}
if eff_delay == 0 &amp;&amp; _attack_Delay_2 &gt; _attack_Delay_max_2 - 10{
if collision_rectangle(x+lengthdir_x(sprite_height*1.2,image_angle+90),y+lengthdir_y(sprite_height*1.2,image_angle+90),x,y,O_ENEMY_P,1,0){
target_en = collision_rectangle(x+lengthdir_x(sprite_height*1.2,image_angle+90),y+lengthdir_y(sprite_height*1.2,image_angle+90),x,y,O_ENEMY_P,1,0);
if instance_exists(target_en){
if target_en.Damage &lt;= 0{
O_Camera.screenShake = 3;
audio_play_sound(att_sword_1_wv,0,0);
target_en._HP -= 2;
target_en.x_pos_max += _xscale * 20;
target_en.x_pos_go = 20;
target_en.Damage = 10;
target_en._Jumping_damage = 1;
}
}
}
if !(_xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)))
&amp;&amp; !(_xscale == -1 &amp;&amp; (_rot_scale == 0)){
/*
it = instance_create(x,y,O_Player_Stick_eff);
it.image_angle = image_angle;
it.sprite_index = sprite_index;
it._xscale = check_xscale;
*/
}
eff_delay = 1;
}
}
}

if _attack_Delay &gt; 0{
_attack_Delay -= 1;
}
if _attack_Delay_2 &gt; 0{
_attack_Delay_2 -= 1;
}

if eff_delay &gt; 0{
eff_delay -= 1;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>img_scales += (1 - img_scales)/10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>_Weapon_switch</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>4</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,0,x,y,_xscale*img_scales,1*img_scales,image_angle,c_white,1);
image_xscale = _xscale*img_scales*img_weapon_scale;
image_yscale = 1*img_scales*img_weapon_scale;

/*
draw_set_font(font0)
draw_text_colour(x,y,string(image_angle+_rot),c_red,c_red,c_red,c_red,1);

draw_rectangle_colour(
x+_xscale*lengthdir_x(sprite_width*0.8,image_angle+_xscale*5)+O_Player._xspd*2,
y+lengthdir_y(sprite_width*0.8,image_angle*_xscale+5),
x+_xscale*lengthdir_x(sprite_width*0.8,image_angle+_xscale*5)+O_Player._xspd*2,
y+lengthdir_y(sprite_width*0.8,image_angle*_xscale+5),
c_red,c_red,c_red,c_red,0);



draw_circle(x+_xscale*lengthdir_x(sprite_width*1.5,image_angle+_xscale*5)+O_Player._xspd*2,
y+lengthdir_y(sprite_width*1.5,_xscale*image_angle+_xscale*5),120,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
