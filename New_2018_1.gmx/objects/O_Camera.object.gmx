<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_collision_p</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Screenshake ////////////////////////////////////////////////////////////////

// If screen is shaking
//view_object = self;
screenShake = 0;

// Offset(s) used for shake
camOffsetX = 0;
camOffsetY = 0;

// Shake direction(s)
shakeX = choose(-1, 1);
shakeY = choose(-1, 1);

SHAKE_DISTANCE = 1;

///////////////////////////////////////////////////////////////////////////////

camera_x = x;
camera_y = y;

camera_speed = 10;

c_dir = 1;

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screenShake = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Position</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(O_Player)){
view_object = self;
x +=(O_Player.x - x)/(O_Player.maxH * 2);
y +=(O_Player.y - y)/10;

/*
        // Make sure player is inside box
        //if (O_Player._Jump &gt; 0){
        camera_x = max(O_Player.x - sprite_width * 0.5 - 2, min(x, O_Player.x + (sprite_width * 0.5) + 2));       
        //camera_x = max(O_Player.x - sprite_width * 0.25 - 2, min(x, O_Player.x + (sprite_width * 0.25) + 2));                   
        //}
        camera_y = max(O_Player.y - 24 - (sprite_height * 0.5), min(y, O_Player.y - 24 + (sprite_height * 0.5)));   
        //mp_potential_step_object(camera_x, camera_y,9,O_Camera)  
        
        // Approach      
        view_xview[0] = Approach(view_xview[0], x - view_wport[0] * 0.5, 10);
        view_yview[0] = Approach(view_yview[0], y - view_hport[0] * 0.5 - 16, 10);
                
        // Make sure camera is inside room
        view_xview[0] = max(0, min(view_xview[0], room_width  - view_wport[0]));
        view_yview[0] = max(0, min(view_yview[0], room_height - view_hport[0]));   
        x = camera_x;
        y = camera_y;  
*/      

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Screenshake</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Screenshake

if (screenShake &gt; 0) {
    view_angle[0] = random_range(-1.5, 1.5);
} else
    view_angle[0] = 0;
    if screenShake &gt; 0{
    screenShake -= 1;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*repeat(abs(O_Player._xspd)){
if x &gt; 0 + 320 &amp;&amp; x &lt; room_width - 320 &amp;&amp; !(O_Player.cLeft || O_Player.cRight) 
        &amp;&amp; O_Player.Slide = false &amp;&amp; (x + (sprite_width * 0.25) &lt; O_Player.x || x - (sprite_width * 0.25) &gt; O_Player.x)
        {
        if (((O_PAD._M_Right == true &amp;&amp; O_Player._xspd &gt; 0) || (O_PAD._M_Left == true &amp;&amp; O_Player._xspd &lt; 0))
        &amp;&amp; !(O_Player._Jump &gt; 3) 
        )
        || (O_Player._xspd != 0 &amp;&amp; (O_Player._Jump &gt; 3))
        {
        with(O_BAC_1){x += sign(O_Player._xspd) * 0.4}//(0.5 * O_Player.xscale)}
        with(O_BAC_2){x += sign(O_Player._xspd) * 0.2}//(0.05 * O_Player.xscale)}
        with(O_BAC_0){x += sign(O_Player._xspd) * 0.9}//(1 * O_Player.xscale)}
        }
        //mp_potential_step_object(camera_x, camera_y,10,O_Camera) 
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(OBJ_ROOM_START){
x = OBJ_ROOM_START.x;
y = OBJ_ROOM_START.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
