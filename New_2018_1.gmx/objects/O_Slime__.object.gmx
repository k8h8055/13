<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>S_slime</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-101</depth>
  <persistent>0</persistent>
  <parentName>O_ENEMY_P</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_xspd_delay = 0;
Damage_eff = 0;
Damage = 0;
onGround = false;

facing = image_xscale; // Change xscale in editor to adjust initial facing

// For squash + stretch
xscale = 1
yscale = 1;

x_pos_go = 0;
x_pos_max = 10;
///////////////////////////////////////////////////////////////////////////////

// Misc ///////////////////////////////////////////////////////////////////////

mDir = 1;
// Relative collision checks
cLeft  = 0;
cRight = 0;
ccLeft  = 0;
ccRight = 0;
cAbove = 0;
cHide = 0;
cClimb_Left = 0;
cClimb_Right = 0;

_xspd = choose(-1,1);
_yspd = 0;

m_dir = 0;

m_Brake = 0;
onGround = false;
platformTarget = false;
onWaters = false;
_Jump = 0;
// Adjust THIS to adjust overall player speed
m = 0.25;

// Acceleration + friction
groundAccel = 1.0//  * m;
groundFric  = 2.0//  * m;
airAccel    = 0.75// * m;
airFric     = 0.10// * m;

// Max movement speeds
maxH        = 1//12  * m;
maxV        = 18//30.0  * m;
mAccel = 0;

gravRise    = 1//3  * m;
gravFall    = 1//3  * m;
gravSlide   = 0.75// * m;
Slide = false;
camDist     = 6//24.0; // (later versions)

// Frames prior to being able to push off of wall slide with arrow keys (doesn't affect wall jump)
clingTime   = 4//4.0  * m;

kJump = false;

_frictionTarget = noone;
_frictionXTarget = noone;

_bac_delay = 0;
_moving = 0;
_Jumping = 0;

_ATTACKING = 0;
_ATTACK = 0;
_ATTACK_1 = 0;
_ATTACK_2 = 0;
_ATTACK_MAGIC = 0;
_ATTACK_MAGICING = 0;
_ATTACK_POSITION = 0;

image_speed = 0.1;

onUpGround = OnUpGround(0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 콜리즌 x,y값
_collision_X = x;
_collision_Y = y-sprite_height/2;
jumpHeight  = 4;
_Jumping_damage = 0;

DIRECTION = 0;
DIRECTION_Y = 0;
DIRECTION_ON = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>130</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 체력 
_HP = 6;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1200</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>10</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_xspd = choose(-2,2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if _HP &lt; 6{
_HP += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (collision_rectangle(x-sprite_width/2,y+sprite_height/2,x-sprite_width/2,y+sprite_height/2,O_Block_Parent,1,0))
&amp;&amp; (collision_rectangle(x+sprite_width/2,y+sprite_height/2,x+sprite_width/2,y+sprite_height/2,O_Block_Parent,1,0))
&amp;&amp; !(collision_rectangle(x-sprite_width/2,y-sprite_height/2,x+sprite_width/2,y-16,O_Block_Parent,1,0)){
_xspd *= -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>300</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Vertical
/*
repeat(abs(_yspd)){

if ((place_meeting(x, y + sign(_yspd), O_Block_empty_parent)) &amp;&amp; sign(_yspd) &lt; 0)
|| ((place_meeting(x, y - sign(_yspd), O_Block_empty_parent)) &amp;&amp; sign(_yspd) &gt; 0)
{
y += sign(_yspd);
}
else{
if (!place_meeting(x, y + sign(_yspd), O_Block_Parent))
&amp;&amp; (!onUpGround)
{
y += sign(_yspd);
}
}
    if ((place_meeting(x, y + sign(_yspd), O_Block_empty_parent))
    &amp;&amp; !((place_meeting(x, y + sign(_yspd), O_Block_empty_parent)) &amp;&amp; sign(_yspd) &gt; 0))
    || ((place_meeting(x, y - sign(_yspd), O_Block_empty_parent)) &amp;&amp; sign(_yspd) &gt; 0)
    {
    y += sign(_yspd);
    }
    else{
    if (place_meeting(x, y + sign(_yspd), O_Block_empty_parent)){
    _yspd = 0;
    break; 
    }
    if (!place_meeting(x, y + sign(_yspd), O_Block_Parent))
        {
        y += sign(_yspd);
        cHide = true;
        }
    else {
    cHide = false;       
        // Move bridge
        if (instance_place(x, y + sign(_yspd) , oBridgeSegment)) {
            with (instance_place(x, y + sign(_yspd) , oBridgeSegment))
                {
                //phy_linear_velocity_y = other.sign(_yspd) * 10;
                }
        } else{    
            _yspd = 0;
            }
        break;
    }
    }
}
*/
if collision_rectangle(x,y-sprite_height/2,x,y+sprite_height/2+_yspd,O_Block_Parent,1,0)
|| collision_rectangle(x,y-sprite_height/2,x,y+sprite_height/2+_yspd,O_Block_empty_parent,1,0) 
{
_yspd = 0;
}
if !collision_rectangle(x,y-sprite_height/2,x,y+sprite_height/2,O_Block_Parent,1,0){
y += _yspd;
}
if x_pos_go &gt; 0 
{
    x_pos_go -= 1
    x += x_pos_max;
}
if (collision_rectangle(x-1,y,x+1,y+sprite_height/2 + 1 ,O_Block_empty_parent,1,0)
|| collision_rectangle(x-1,y,x+1,y+sprite_height/2 + 1,O_Block_Parent,1,0))
&amp;&amp; !collision_rectangle(x-sprite_width/2,y+sprite_height/2 - 1,x+sprite_width/2,y,O_Block_Parent,1,0)
{
x += _xspd;
}

if !(collision_rectangle(x-sprite_width/2-1,y,x-sprite_width/2+1,y+sprite_height/2 + 1,O_Block_empty_parent,1,0))
|| !(collision_rectangle(x+sprite_width/2-1,y,x+sprite_width/2+1,y+sprite_height/2 + 1,O_Block_empty_parent,1,0))
{
if collision_rectangle(x,y-sprite_height/2,x,y+sprite_height/2+1,O_Block_empty_parent,1,0)
&amp;&amp; _xspd_delay == 0
{
_xspd_delay = 30;
_xspd *= -1;
}
}

if (collision_rectangle(x-sprite_width/2-1,y-1,x+sprite_width/2+1,y+1,O_Block_Parent,1,0)
|| !(collision_rectangle(x-sprite_width/2-1,y,x-sprite_width/2+1,y+sprite_height/2 + 1,O_Block_Parent,1,0))
|| !(collision_rectangle(x+sprite_width/2-1,y,x+sprite_width/2+1,y+sprite_height/2 + 1,O_Block_Parent,1,0)))
{
if !collision_rectangle(x,y-sprite_height/2,x,y+sprite_height/2+1,O_Block_empty_parent,1,0)
&amp;&amp; _xspd_delay == 0
{
_xspd_delay = 30;
_xspd *= -1;
}
}
if _xspd_delay &gt;0{
_xspd_delay -= 1;
}
/*    
var tempH = sign(_xspd);
repeat(abs(x_pos_max)){
    if (place_meeting(x, y + 1 , oBridgeSegment)) {
        if (place_meeting(x + sign(x_pos_max), y , O_Block_Parent)) {
            // 5 pixel bridge slope
            if (place_meeting(x + sign(x_pos_max), y - 4 , O_Block_Parent) &amp;&amp; place_meeting(x + sign(x_pos_max), y - 3 , O_Block_Parent) &amp;&amp; place_meeting(x + sign(x_pos_max), y - 2 , O_Block_Parent) &amp;&amp; place_meeting(x + sign(x_pos_max), y - 1 , O_Block_Parent)) {
                if (!place_meeting(x + sign(x_pos_max), y - 5 , O_Block_Parent))
                    {y -= 5;DIRECTION = 45;DIRECTION_Y = 1*10}
            }
            
            // 4 pixel bridge slope
            if (place_meeting(x + sign(x_pos_max), y - 3 , O_Block_Parent) &amp;&amp; place_meeting(x + sign(x_pos_max), y - 2 , O_Block_Parent) &amp;&amp; place_meeting(x + sign(x_pos_max), y - 1 , O_Block_Parent)) {
                if (!place_meeting(x + sign(x_pos_max), y - 4 , O_Block_Parent))
                    {y -= 4;DIRECTION = 40;DIRECTION_Y = 1*8}
            }
            
            // 3 pixel bridge slope
            if (place_meeting(x + sign(x_pos_max), y - 2 , O_Block_Parent) &amp;&amp; place_meeting(x + sign(x_pos_max), y - 1 , O_Block_Parent)) {
                if (!place_meeting(x + sign(x_pos_max), y - 3 , O_Block_Parent))
                    {y -= 3;DIRECTION = 35;DIRECTION_Y = 1*6}
            }
        }
    } 
    else{DIRECTION = 0;DIRECTION_Y = 0;}
    // End bridge   
    
    // UP slope
    if (place_meeting(x + sign(x_pos_max), y , oBridgeSegment) &amp;&amp; place_meeting(x + sign(x_pos_max), y - 1 , oBridgeSegment) &amp;&amp; !(place_meeting(x + sign(x_pos_max), y - 2 , oBridgeSegment))) {
        y -= 2;DIRECTION = 30;DIRECTION_Y = 1*4;
    } else if (place_meeting(x + sign(x_pos_max), y , oBridgeSegment) &amp;&amp; !place_meeting(x + sign(x_pos_max), y - 1 , oBridgeSegment)) {
        --y;DIRECTION = 25;DIRECTION_Y = 1*2;
    }
    
    // DOWN slope
    if (!place_meeting(x + sign(x_pos_max), y , oBridgeSegment) &amp;&amp; !place_meeting(x + sign(x_pos_max), y + 1 , oBridgeSegment) &amp;&amp; !place_meeting(x + sign(x_pos_max), y + 2 , oBridgeSegment) &amp;&amp; place_meeting(x + sign(x_pos_max), y + 3 , oBridgeSegment))
        {y += 2;DIRECTION = 30;DIRECTION_Y = 1*2;}
    else if (!place_meeting(x + sign(x_pos_max), y , oBridgeSegment) &amp;&amp; !place_meeting(x + sign(x_pos_max), y + 1 , oBridgeSegment) &amp;&amp; place_meeting(x + sign(x_pos_max), y + 2 , oBridgeSegment))
        {++y;DIRECTION = 25;DIRECTION_Y = 1*2;}
        
    if (!place_meeting(x + sign(x_pos_max), y , O_Block_Parent)) &amp;&amp; (place_meeting(x + sign(x_pos_max), y + 1 , O_Block_Parent))
    || (!(onGround) &amp;&amp; (!place_meeting(x + sign(x_pos_max), y+sign(_yspd) , O_Block_Parent)))
    { 
    if x_pos_go &gt; 0{
    x_pos_go -= 1
    x += sign(x_pos_max)
    }
    
    }
    else{   
    x_pos_go = 0;
    x_pos_max = 0;
    break;
    }
    }
    /*
   if (place_meeting(x, y + 1 , oBridgeSegment)) {
        if (place_meeting(x + sign(_xspd), y , O_Block_Parent)) {
            // 5 pixel bridge slope
            if (place_meeting(x + sign(_xspd), y - 4 , O_Block_Parent) &amp;&amp; place_meeting(x + sign(_xspd), y - 3 , O_Block_Parent) &amp;&amp; place_meeting(x + sign(_xspd), y - 2 , O_Block_Parent) &amp;&amp; place_meeting(x + sign(_xspd), y - 1 , O_Block_Parent)) {
                if (!place_meeting(x + sign(_xspd), y - 5 , O_Block_Parent))
                    {y -= 5;DIRECTION = 45;DIRECTION_Y = 1*10}
            }
            
            // 4 pixel bridge slope
            if (place_meeting(x + sign(_xspd), y - 3 , O_Block_Parent) &amp;&amp; place_meeting(x + sign(_xspd), y - 2 , O_Block_Parent) &amp;&amp; place_meeting(x + sign(_xspd), y - 1 , O_Block_Parent)) {
                if (!place_meeting(x + sign(_xspd), y - 4 , O_Block_Parent))
                    {y -= 4;DIRECTION = 40;DIRECTION_Y = 1*8}
            }
            
            // 3 pixel bridge slope
            if (place_meeting(x + sign(_xspd), y - 2 , O_Block_Parent) &amp;&amp; place_meeting(x + sign(_xspd), y - 1 , O_Block_Parent)) {
                if (!place_meeting(x + sign(_xspd), y - 3 , O_Block_Parent))
                    {y -= 3;DIRECTION = 35;DIRECTION_Y = 1*6}
            }
        }
    } 
    else{DIRECTION = 0;DIRECTION_Y = 0;}
    // End bridge   
    
    // UP slope
    if (place_meeting(x + sign(_xspd), y , oBridgeSegment) &amp;&amp; place_meeting(x + sign(_xspd), y - 1 , oBridgeSegment) &amp;&amp; !(place_meeting(x + sign(_xspd), y - 2 , oBridgeSegment))) {
        y -= 2;DIRECTION = 30;DIRECTION_Y = 1*4;
    } else if (place_meeting(x + sign(_xspd), y , oBridgeSegment) &amp;&amp; !place_meeting(x + sign(_xspd), y - 1 , oBridgeSegment)) {
        --y;DIRECTION = 25;DIRECTION_Y = 1*2;
    }
    
    // DOWN slope
    if (!place_meeting(x + sign(_xspd), y , oBridgeSegment) &amp;&amp; !place_meeting(x + sign(_xspd), y + 1 , oBridgeSegment) &amp;&amp; !place_meeting(x + sign(_xspd), y + 2 , oBridgeSegment) &amp;&amp; place_meeting(x + sign(_xspd), y + 3 , oBridgeSegment))
        {y += 2;DIRECTION = 30;DIRECTION_Y = 1*2;}
    else if (!place_meeting(x + sign(_xspd), y , oBridgeSegment) &amp;&amp; !place_meeting(x + sign(_xspd), y + 1 , oBridgeSegment) &amp;&amp; place_meeting(x + sign(_xspd), y + 2 , oBridgeSegment))
        {++y;DIRECTION = 25;DIRECTION_Y = 1*2;}
       */ 
/*    
repeat(abs(_xspd)){
if (place_meeting(x + sign(_xspd), y+sign(_yspd)*2+1, O_Block_empty_parent))
&amp;&amp; (!place_meeting(x + sign(_xspd), y , O_Block_Parent))
{
if x &gt; room_width - (sign(_xspd)){
        x -= abs(sign(_xspd))
        }else{
        if x &lt; (sign(_xspd)){
        x += abs(sign(_xspd))
        }          
        else{
        if ((_ATTACKING == 0) &amp;&amp; _ATTACK_MAGICING &lt;= 0){
        x += sign(_xspd);    
        }
        }
        } 
}
else if (!place_meeting(x + sign(_xspd), y , O_Block_Parent)) &amp;&amp; (place_meeting(x + sign(_xspd), y + 1 , O_Block_Parent))
    {        
        if x &gt; room_width - (sign(_xspd)){
        x -= abs(sign(_xspd))
        }else{
        if x &lt; (sign(_xspd)){
        x += abs(sign(_xspd))
        }          
        else{
        if ((_ATTACKING == 0) &amp;&amp; _ATTACK_MAGICING &lt;= 0 &amp;&amp; (onGround)){// || !(onGround){
        x += sign(_xspd); 
        }
        }
        }    
        }
}
if _xspd_delay = 0{
if onUpGround{
if !(collision_rectangle(x-sprite_width/2,y+sprite_height/2,x-sprite_width/2,y+sprite_height/2,O_Block_empty_parent,1,0))
        || !(collision_rectangle(x+sprite_width/2,y+sprite_height/2,x+sprite_width/2,y+sprite_height/2,O_Block_empty_parent,1,0))
        || (collision_rectangle(x-sprite_width/2,y-sprite_height/2,x+sprite_width/2,y-16,O_Block_empty_parent,1,0)){
        //x -= (sign(_xspd)+x_pos_max)*1; 
        _xspd *= -1;
        _xspd_delay = 30;
        }
}
        else if !(collision_rectangle(x-sprite_width/2,y+sprite_height/2+1,x-sprite_width/2,y+sprite_height/2+1,O_Block_Parent,1,0))
        || !(collision_rectangle(x+sign(_xspd),y+sprite_height/2 + 1,x+sign(_xspd),y+sprite_height/2 + 1,O_Block_Parent,1,0))
        || (collision_rectangle(x-sprite_width/2-abs(sign(_xspd)),y,x+sprite_width/2+abs(sign(_xspd)),y-sprite_height/2,O_Block_Parent,1,0)){
        //x -= (sign(_xspd)+x_pos_max)*1; 
        _xspd *= -1;
        _xspd_delay = 30;
        }
        }
if _xspd_delay &gt; 0 {
_xspd_delay -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cLeft  = place_meeting(x - 1, y, O_Block_Parent); 
cRight = place_meeting(x + 1, y, O_Block_Parent); 
cAbove = place_meeting(x, y - 1, O_Block_Parent);
cc_Left = collision_rectangle(x-sprite_width/2 - 1,y-sprite_height,x,y+5,O_Block_Parent,1,0);
cc_Right = collision_rectangle(x,y-sprite_height,x+sprite_width+1,y+5,O_Block_Parent,1,0);

cClimb_Left = place_meeting(x + 1, y+1, O_Climb_Parent); 
cClimb_Right = place_meeting(x - 1, y+1, O_Climb_Parent);

var temp;

// Check if you were onGround previous frame
temp = onGround;

onGround = OnGround(xscale);
onUpGround = OnUpGround(xscale);
//if onGround{_yspd = 0};

image_speed = abs(_xspd) * 0.1;

if collision_rectangle(x-sprite_width/2+5,y-sprite_height/2,x+sprite_width/2-5,
y+sprite_height/2,O_Player,1,0){
targets = collision_rectangle(x-sprite_width/2+5,y-sprite_height/2,x+sprite_width/2-5,
y+sprite_height/2,O_Player,1,0);

if instance_exists(targets){
if targets._Damage &lt;= 0{
targets._xspd = targets.xscale * -6;
targets._Damage = 80;
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Damage &gt; 0{
_xspd = 0;
alarm[11] = 30;
Damage -= 1;
    if _Jumping_damage == 1{
          image_index = 0;
        _yspd = -jumpHeight * 1.2;
           
        jumpHeight = 4;
        _Jumping_damage = 0;
        }
image_blend = c_red;        
if _HP &lt;= 0{
ps1 = part_system_create();
pt1 = part_type_create();
part_type_shape(pt1,1);
part_type_sprite(pt1,S_effect_1,0,1,1);
part_type_color3(pt1,c_white,c_white,c_white);
part_type_size(pt1,0.2,1,0,0);
part_type_alpha3(pt1,1,0.1,0);
part_type_speed(pt1,10,40,0,0);
part_type_life(pt1,10,15);
part_type_direction(pt1,0,360,0,0);
part_type_orientation(pt1,0,360,0,0,1);
//part_type_gravity(pt1,1,270);//irandom_range(70,110)
part_type_scale(pt1,1,1);
part_type_blend(pt1,1);
part_system_depth(ps1,-500)
ps1 =part_emitter_create(ps1);
part_emitter_region(ps1,ps1,x-sprite_width/2,x+sprite_width/2,y-sprite_height,y,ps_shape_line,ps_distr_gaussian);
part_emitter_burst(ps1,ps1,pt1,30);
instance_destroy();
}else{
if Damage_eff = 0{
ps1 = part_system_create();
pt1 = part_type_create();
part_type_shape(pt1,1);
part_type_sprite(pt1,S_effect_1,0,1,1);
part_type_color3(pt1,c_white,c_white,c_white);
part_type_size(pt1,0.1,0.6,0,0);
part_type_alpha3(pt1,1,0.1,0);
part_type_speed(pt1,2,8,0,0);
part_type_life(pt1,10,15);
part_type_direction(pt1,0,360,0,0);
part_type_orientation(pt1,0,360,0,0,1);
//part_type_gravity(pt1,1,270);//irandom_range(70,110)
part_type_scale(pt1,1,1);
part_type_blend(pt1,1);
part_system_depth(ps1,-500)
ps1 =part_emitter_create(ps1);
part_emitter_region(ps1,ps1,_collision_X,_collision_X,_collision_Y,_collision_Y,ps_shape_line,ps_distr_gaussian);
part_emitter_burst(ps1,ps1,pt1,30);

Damage_eff = 1;
}
}
}else{
if _HP &lt;= 0{
ps1 = part_system_create();
pt1 = part_type_create();
part_type_shape(pt1,1);
part_type_sprite(pt1,S_effect_1,0,1,1);
part_type_color3(pt1,c_white,c_white,c_white);
part_type_size(pt1,0.2,1,0,0);
part_type_alpha3(pt1,1,0.1,0);
part_type_speed(pt1,10,40,0,0);
part_type_life(pt1,10,15);
part_type_direction(pt1,0,360,0,0);
part_type_orientation(pt1,0,360,0,0,1);
//part_type_gravity(pt1,1,270);//irandom_range(70,110)
part_type_scale(pt1,1,1);
part_type_blend(pt1,1);
part_system_depth(ps1,-500)
ps1 =part_emitter_create(ps1);
part_emitter_region(ps1,ps1,x-sprite_width/2,x+sprite_width/2,y-sprite_height,y,ps_shape_line,ps_distr_gaussian);
part_emitter_burst(ps1,ps1,pt1,30);
instance_destroy();
}

image_blend = c_white;
Damage = 0;
Damage_eff = 0;
_collision_Y = y-sprite_height/2;
_collision_X = x;
}

if ((cLeft || cRight) &amp;&amp; _yspd &gt;= 0) {
        // Wall slide
        _yspd = Approach(_yspd, maxV, gravSlide);
    } else {
        
        // Fall normally
        if (_yspd &lt; 0)
            _yspd = Approach(_yspd, maxV, gravRise);
        else
            _yspd = Approach(_yspd, maxV, gravFall);
    }
    
if _xspd &gt; 0{xscale = 1;}
else if _xspd &lt; 0{xscale = -1;};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (onGround){ 
    draw_sprite_ext(sprite_index, image_index,x-_ATTACK_POSITION*xscale, y+DIRECTION_Y+DIRECTION_ON*_ATTACK_POSITION/2*xscale,1*xscale, 1, DIRECTION, image_blend, image_alpha);       
        }
    else{
    if (Slide){
    draw_sprite_ext(sprite_index,0, x-_ATTACK_POSITION*xscale, y+DIRECTION_Y+DIRECTION_ON*_ATTACK_POSITION/2*xscale,1*xscale,1,DIRECTION,image_blend, image_alpha); 
    }
    else{
    draw_sprite_ext(sprite_index, image_index,x-_ATTACK_POSITION*xscale,y+DIRECTION_Y+DIRECTION_ON*_ATTACK_POSITION/2*xscale,1*xscale,1, DIRECTION, image_blend, image_alpha);
    }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
