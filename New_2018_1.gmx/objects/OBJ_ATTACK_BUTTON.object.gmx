<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_attack_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>_alp = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview + view_wview - sprite_width * 0.5;
y = view_yview + view_hview - sprite_height/2;

for(i=0;i&lt;10;i++){
if (device_mouse_check_button_pressed(i,mb_left))
&amp;&amp; device_mouse_x(i) &gt; (view_xview + view_wview - sprite_width * 0.5) - sprite_width/2
&amp;&amp; device_mouse_x(i) &lt; (view_xview + view_wview - sprite_width * 0.5) + sprite_width/2
&amp;&amp; device_mouse_y(i) &lt; (view_yview + view_hview - sprite_height/2) + sprite_height/2
&amp;&amp; device_mouse_y(i) &gt; (view_yview + view_hview - sprite_height/2) - sprite_height/2
{
with(O_Player_Stick){
if _attack_Delay &lt;= 0 &amp;&amp; (_attack_Delay_2 &lt;= _attack_Delay_max - 15)
{
image_angle = (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale) - _rot)
check_x = O_Player_target.x
check_y = O_Player_target.y
check_xscale = image_xscale;
check_x_pos = x;
check_y_pos = y;
_attack_Delay = _attack_Delay_max;
_attack_Delay_2 = 0;
with(O_Player_Stick_2){
_attack_Delay_2 = _attack_Delay_max-10;
_attack_Delay = 0;
}
}
else if _attack_Delay_2 &lt;= 0 &amp;&amp; _attack_Delay &lt;= _attack_Delay_max - 15{
if _gun == 1{
with(O_Player_Stick_2){
if _attack_Delay &lt;= 0 &amp;&amp; ((_attack_Delay_2 &lt;= _attack_Delay_max - 15 &amp;&amp; _long_sword == 1)
|| (_attack_Delay_2 &lt;= 0 &amp;&amp; _gun == 1)){
image_angle = (point_direction(x,y, O_Player_target.x,O_Player_target.y)-(_rot_on - _rot_scale) - _rot)
check_x = O_Player_target.x
check_y = O_Player_target.y
check_xscale = image_xscale;
check_x_pos = x;
check_y_pos = y;

_attack_Delay = _attack_Delay_max;
_attack_Delay_2 = 0;
with(O_Player_Stick){
_attack_Delay_2 = _attack_Delay_max-25;
_attack_Delay = 0;
}
}
}
}else if _AR_gun == 0{
_attack_Delay_2 = _attack_Delay_max;
_attack_Delay = 0;
}
}
}
_alp = 2;
}
}

_alp += (0.5-_alp)/5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,0,
view_xview + view_wview - sprite_width * 0.5,
view_yview + view_hview - sprite_height/2,1,1,0,c_white,_alp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
