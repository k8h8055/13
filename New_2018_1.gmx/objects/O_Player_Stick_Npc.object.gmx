<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_weapon_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-155</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MyMaster = noone;
MyClone = noone;
EnTarget = noone;
_xscale = 1;

_rot = -5;

_rot_check = 1;

_rot_on = 0;

_rot_scale = 0;
randomize();
_Weapon_switch = -1;//irandom(4);

_long_sword = 0;
_long_knife = 0;
_sword = 0;
_gun = 0;
_AR_gun = 0;
_SG_gun = 0;
_GU_weapon = 0;

_xpos = 0;
_xpos_save = 0;
_ypos = 0;
_ypos_save = 0;

_attack = 0;
_attack_2 = 0;

_attack_Delay = 0;
_attack_Delay_max = 60
_attack_Delay_2 = 0;
_attack_Delay_max_2 = 60;
_attack_Delay_3 = 0;
_attack_Delay_max_3 = 60;

_attack_delay_next = 15;

_attack_angle = 0;
_attack_angle_2 = 0;
_atttack_total = 0;
check_x = 0;
check_y = 0;

check_x_pos = 0;
check_y_pos = 0;

check_xscale = 1;

eff_delay = 0;

angle = 0;

range_max = 100;
angle_speed = 4;

Weapon_hand = 0;

img_scales = 1;

_ypos_index = 0;
no_rot = 0;

range = 0;
range_y = 0;

weapon_wheel_delay = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if _attack_Delay &gt; _attack_Delay_max/3{
audio_play_sound(att_AR_gun_at_0_wv,0,0);
is = instance_create(x+_xscale*lengthdir_x(sprite_width*0.5,image_angle+_xscale*5)+MyMaster._xspd*2,
y+lengthdir_y(sprite_width*0.5,_xscale*image_angle+5),O_FIRE_ATT_AR_M);

is._dir = _xscale;
is.image_angle = image_angle-_xscale*(2+no_rot);
_xpos -= (0.1);
_ypos = 0.5;
no_rot += 2;
MyMaster.rot += _xscale*(4) ;
alarm[1] = 5;
_attack_Delay -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = MyMaster.x;
y = MyMaster.y;

target_position_x = x;
target_position_y = y;
if instance_exists(O_Player_Stick){
_Weapon_switch = O_Player_Stick._Weapon_switch;
}
_long_sword = 0;
_long_knife = 0;
_sword = 0;
_gun = 0;
_AR_gun = 0;
_SG_gun = 0;
_GU_weapon = 0;
_ypos_index = 0;

switch(MyMaster.character){
case 4 : _ypos_index = 5;break;
}
switch(_Weapon_switch){
case 0 : sprite_index = spr_weapon_1;
_long_sword = 1;
_attack_angle = 220;
_attack_angle_2 = -45;
_attack_Delay_max = 60
_attack_Delay_max_2 = 60;
_attack_delay_next = 20;

range_max = 200;

_xpos = 0;
_ypos = 10;
_rot_on = -40;
angle_speed = 2;
break;
case 1 : sprite_index = spr_gun_1;
MyClone = instance_create(x,y,O_Player_Stick_Npc2);
MyClone.MyFriend = self;
MyClone.MyMaster = MyMaster;
MyClone._Weapon_switch = _Weapon_switch;
//it._Weapon_switch = _Weapon_switch;
_gun = 1;
_attack_angle = -25;
_attack_angle_2 = 0;
_attack_Delay_max = 20;
_attack_Delay_max_2 = 20;
_attack_delay_next = 10;
range_max = 400;
_xpos = 0;
_ypos = 12;
_rot_on = 0;
angle_speed = 4;
break;
case 2 : sprite_index = spr_AR_gun_1;
_AR_gun = 1;
_attack_angle = -30;
_attack_angle_2 = 0;
_attack_Delay_max = 35;
_attack_Delay_max_2 = 10;
range_max = 400;
_xpos = -6;
_ypos = 10;
_rot_on = 5;
angle_speed = 20;
break;

case 3 : sprite_index = spr_SG_gun_1;
_SG_gun = 1;
_attack_angle = -60;
_attack_angle_2 = 0;
_attack_Delay_max = 60;
_attack_Delay_max_2 = 60;
range_max = 250;
_xpos = -2;
_ypos = 12;
_rot_on = 15;
angle_speed = 5;
break;

case 4 : sprite_index = spr_RAM_GU;
_GU_weapon = 1;
_attack_angle = -60;
_attack_angle_2 = 0;
_attack_Delay_max = 60;
_attack_Delay_max_2 = 60;
range_max = 500;
_xpos = -20;
_ypos = 14;
_rot_on = 0;
angle_speed = 15;
break;

case 5 : sprite_index = spr_long_knife;
_long_knife = 1;
_attack_angle = 220;
_attack_angle_2 = -45;
_attack_Delay_max = 60
_attack_Delay_max_2 = 60;
_attack_delay_next = 20;

range_max = 200;

_xpos = 0;
_ypos = 10;
_rot_on = -40;
angle_speed = 2;
break;
}
_ypos_save = _ypos;
_xpos_save = _xpos;

if _xscale == 1{
_rot_scale = 0;
}
if _xscale == -1{
_rot_scale = _rot_on + (_rot_on + 180);
}

image_angle = (point_direction(x,y,x + _xscale*100,y)-(_rot_on - _rot_scale))

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(_GU_weapon == 1 &amp;&amp; _attack_Delay &gt; 0){
x = MyMaster.x+(_xpos * _xscale);
y = MyMaster.y+_ypos + _ypos_index;
}
else{
if (_GU_weapon == 1 &amp;&amp; _attack_Delay &lt; _attack_Delay_max - 40){
x += ((MyMaster.x+(_xpos * _xscale)) - x) / 5;
y += ((MyMaster.y+_ypos+_ypos_index) - y) / 5;
}
}

_xpos += (_xpos_save - _xpos)/30;
_ypos += (_ypos_save - _ypos)/30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.inventory_on</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>_Weapon_switch</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>4</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 기본 움직임 
_xscale = MyMaster.xscale;
if EnTarget != noone{
if _attack_Delay &lt;= 0 &amp;&amp; (_attack_Delay_2 &lt;= _attack_Delay_max - _attack_delay_next)
&amp;&amp; (_attack_Delay_3 &lt;= _attack_Delay_max - _attack_delay_next)
{
Weapon_Attack_npc(_attack_Delay,_attack_Delay_2,_attack_Delay_max,_attack_delay_next,MyClone,EnTarget);
}
else if _attack_Delay_2 &lt;= 0 &amp;&amp; _attack_Delay &lt;= _attack_Delay_max - _attack_delay_next
&amp;&amp; (_attack_Delay_3 &lt;= _attack_Delay_max_2 - _attack_delay_next)
{
Weapon_Attack_npc_2(_attack_Delay,_attack_Delay_2,_attack_Delay_max,_attack_delay_next,MyClone,EnTarget);
}
}
if _attack_Delay &lt;= 0 &amp;&amp; _attack_Delay_2 &lt;= 0{
EnTarget = noone;
if collision_rectangle(x-range,y-range_y,x+range,y+range_y,O_ENEMY_P,1,0){
EnTarget = collision_rectangle(x-range,y-range_y,x+range,y+range_y,O_ENEMY_P,1,0);
if collision_line(x,y-64,EnTarget.x,EnTarget.y,O_Block_Parent,1,0)
EnTarget = noone;
}
else{
EnTarget = noone;
}
}
else{
if !instance_exists(EnTarget){
EnTarget = noone;
}
}
if range &lt; range_max{
range += 50;
}
else{
if range_y &lt; range_max{
range_y += 50;
}
else{
range = 0;
range_y = 0;
}
}

if _attack_Delay &lt;= 0 &amp;&amp; _attack_Delay_2 &lt;= 0{
if EnTarget != noone{
if _xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)){
_rot_scale = 0;
image_angle = (point_direction(x,y,EnTarget.x,y)-(_rot_on - _rot_scale))
}
if _xscale == -1 &amp;&amp; (_rot_scale == 0){
_rot_scale = _rot_on + (_rot_on + 180);
image_angle = (point_direction(x,y, EnTarget.x,y)-(_rot_on - _rot_scale))
}

if image_angle - (point_direction(x,y, EnTarget.x,y)-(_rot_on - _rot_scale) - _rot) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(x,y, EnTarget.x,y)-(_rot_on - _rot_scale) - _rot) - image_angle)/angle_speed{
image_angle -= 360;
}
else{
if (point_direction(x,y, EnTarget.x,y)-(_rot_on - _rot_scale) - _rot) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(x,y, EnTarget.x,y)-(_rot_on - _rot_scale) - _rot) - image_angle)/angle_speed{
image_angle += 360;
}
}
image_angle += ((point_direction(x,y, EnTarget.x,y)-(_rot_on - _rot_scale) - _rot) - image_angle)/angle_speed;
}else{
//Weapon_NAngle(self,_xscale,_rot_scale,_rot_on,_rot,angle_speed);
// Weapon_NAngle(bool,_xscale,_rot_scale,_rot_on,_rot,angle_speed)
if _xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)){
_rot_scale = 0;
image_angle = (point_direction(x,y,x + _xscale*100,y)-(_rot_on - _rot_scale))
}
if _xscale == -1 &amp;&amp; (_rot_scale == 0){
_rot_scale = _rot_on + (_rot_on + 180);
image_angle = (point_direction(x,y, x + _xscale*100,y)-(_rot_on - _rot_scale))
}

if image_angle - (point_direction(x,y, x + _xscale*100,y)-(_rot_on - _rot_scale) - _rot) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(x,y, x + _xscale*100,y)-(_rot_on - _rot_scale) - _rot) - image_angle)/angle_speed{
image_angle -= 360;
}
else{
if (point_direction(x,y, x + _xscale*100,y)-(_rot_on - _rot_scale) - _rot) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(x,y, x + _xscale*100,y)-(_rot_on - _rot_scale) - _rot) - image_angle)/angle_speed{
image_angle += 360;
}
}
image_angle += ((point_direction(x,y, x + _xscale*100,y)-(_rot_on - _rot_scale) - _rot) - image_angle)/angle_speed;

if _rot_check == 1 &amp;&amp; _rot &lt; 5{
_rot += 0.1;
}else{
_rot_check = 2;
}

if _rot_check == 2 &amp;&amp; _rot &gt; -5{
_rot -= 0.1;
}else{
_rot_check = 1;
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 어택 움직임 

if (_attack_Delay &gt; 0) &amp;&amp; (EnTarget != noone){
_xscale = MyMaster.xscale;

check_x = EnTarget.x
check_y = EnTarget.y
check_x_pos = x;
check_y_pos = y;
check_xscale = _xscale;

if _xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)){
_rot_scale = 0;
check_xscale = _xscale;
if _long_sword == 1
image_angle = image_angle + 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle));
}

if _xscale == -1 &amp;&amp; (_rot_scale == 0){
_rot_scale = _rot_on + (_rot_on + 180);
check_xscale = _xscale;

if _long_sword == 1
image_angle = image_angle - 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle));
}
if image_angle - (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) - image_angle)/angle_speed{
image_angle -= 360;
}
else{
if (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) - image_angle)/angle_speed{
image_angle += 360;
}
}
if !(_attack_Delay &lt; _attack_Delay_max/2 &amp;&amp; _SG_gun == 1) &amp;&amp; _GU_weapon == 0{
image_angle += ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle)) - image_angle)/angle_speed
}

if (_attack_Delay &lt; _attack_Delay_max/2  &amp;&amp; _SG_gun == 1){
image_angle += ((point_direction(x,y,EnTarget.x,EnTarget.y)-(_rot_on - _rot_scale)) - image_angle)/angle_speed;
}
if _attack_Delay_max == _attack_Delay{
if _SG_gun == 1{
WeaponSG(self,MyMaster,_xscale,EnTarget);
}
else if _AR_gun = 1{
no_rot = 0;
if _xscale == 1
image_angle = point_direction(x,y,EnTarget.x,EnTarget.y)
else
image_angle = point_direction(x,y,EnTarget.x,EnTarget.y)+180;

alarm[1] = 2;
}
else{
if _gun == 1{
WeaponNGun(self,MyMaster,_xscale,EnTarget);
}
else if _GU_weapon == 1{
MyMaster.rot -= _xscale * 20;
target_position_x = EnTarget.x;
target_position_y = EnTarget.y;
audio_play_sound(att_sword_swing_wv,0,0);
}
else{
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale));
var _att_dir = (point_direction(x,y, EnTarget.x,EnTarget.y));
audio_play_sound(att_sword_swing_wv,0,0);
IT = instance_create(x+lengthdir_x(sprite_width*1.2,_att_dir)+MyMaster._xspd*2,
y+lengthdir_y(sprite_width*1.2,_att_dir),O_Player_Stick_meff);
IT._xscale = _xscale;
IT.image_angle = _att_dir
MyMaster.rot -= _xscale * 20;
}
}
}
if eff_delay == 0 &amp;&amp; _attack_Delay &gt; _attack_Delay_max-10{
if (_SG_gun = 0 &amp;&amp; _AR_gun = 0){
if _gun == 1{
_xpos -= _xscale*0.2;
_ypos -= 0.2;
}
}
if (!(_xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)))
&amp;&amp; !(_xscale == -1 &amp;&amp; (_rot_scale == 0))){
it2 = instance_create(x,y,O_Player_Stick_eff);
it2.MyMaster = self;
it2.sprite_index = sprite_index;
it2.image_angle = image_angle;
it2.image_xscale = check_xscale;
}
eff_delay = 1;
}
if _GU_weapon == 1 &amp;&amp; _attack_Delay &gt; _attack_Delay_max - 10{
x += (target_position_x - x)/5;
y += (target_position_y - y)/5;
}
if _GU_weapon == 1{
if collision_line(x,y,x+(target_position_x - x)/6,y+(target_position_y - y)/6,O_Block_Parent,1,0){
if _attack_Delay &gt; _attack_Delay_max - 40{
_attack_Delay = _attack_Delay_max - 40;
}
target_position_x = ((MyMaster.x+(_xpos * _xscale)));
target_position_y = (MyMaster.y+_ypos);
}

if collision_circle(x,y,sprite_width,O_ENEMY_P,1,0){
target_en = collision_circle(x,y,sprite_width,O_ENEMY_P,1,0);
if instance_exists(target_en){
if target_en.Damage &lt;= 0{
O_Camera.screenShake = 3;
audio_play_sound(att_sword_1_wv,0,0);
target_en._HP -= 4;
target_en.x_pos_max += _xscale * 2;
target_en.x_pos_go = 2;
target_en.Damage = 10;
//target_en._Jumping_damage = 1;
}
}
}
image_angle += 40;
}
}
else if (EnTarget != noone &amp;&amp; _attack_Delay_2 &gt; 0){
if _GU_weapon == 1 &amp;&amp; _attack_Delay &gt; 0{
image_angle += 40;
}
if (_gun == 1){
_xscale = MyMaster.xscale;

if _xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)){
_rot_scale = 0;
check_xscale = _xscale;
if _long_sword == 1
image_angle = image_angle + 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2));
}

if _xscale == -1 &amp;&amp; (_rot_scale == 0){
_rot_scale = _rot_on + (_rot_on + 180);
check_xscale = _xscale;

if _long_sword == 1
image_angle = image_angle - 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2));
}
if image_angle - (point_direction(x,y, EnTarget.x,EnTarget.y)-(_rot_on - _rot_scale)) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(x,y, EnTarget.x,EnTarget.y)-(_rot_on - _rot_scale)) - image_angle)/angle_speed{
image_angle -= 360;
}
else{
if (point_direction(x,y, EnTarget.x,EnTarget.y)-(_rot_on - _rot_scale)) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(x,y, EnTarget.x,EnTarget.y)-(_rot_on - _rot_scale)) - image_angle)/angle_speed{
image_angle += 360;
}
}
image_angle += ((point_direction(x,y,EnTarget.x,EnTarget.y)-(_rot_on - _rot_scale)) - image_angle)/angle_speed;
}

if (_gun == 0 &amp;&amp; _AR_gun == 0 &amp;&amp; _SG_gun == 0){
_xscale = MyMaster.xscale;
check_x = EnTarget.x
check_y = EnTarget.y
check_x_pos = x;
check_y_pos = y;
check_xscale = _xscale;

if _xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)){
_rot_scale = 0;
check_xscale = _xscale;
if _long_sword == 1
image_angle = image_angle + 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2));
}

if _xscale == -1 &amp;&amp; (_rot_scale == 0){
_rot_scale = _rot_on + (_rot_on + 180);
check_xscale = _xscale;
if _long_sword == 1
image_angle = image_angle - 180;
else
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2));
}
if image_angle - (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) &gt;= 270 &amp;&amp; 0 &gt; ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) - image_angle)/angle_speed{
image_angle -= 360;
}
else{
if (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) - image_angle &gt;= 270 &amp;&amp; 0 &lt; ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) - image_angle)/angle_speed{
image_angle += 360;
}
}
image_angle += ((point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle_2)) - image_angle)/angle_speed

if _attack_Delay_max_2 == _attack_Delay_2 &amp;&amp; _long_sword = 1{
image_angle = (point_direction(check_x_pos,check_y_pos, check_x,check_y)-(_rot_on - _rot_scale) - (check_xscale *_attack_angle));
var _att_dir = (point_direction(x,y, EnTarget.x,EnTarget.y));
audio_play_sound(att_sword_swing_wv,0,0);
IT = instance_create(x+lengthdir_x(sprite_width*1.5,_att_dir)+MyMaster._xspd*2,
y+lengthdir_y(sprite_width*1.5,_att_dir),O_Player_Stick_meff);
IT._xscale = _xscale;
IT.image_angle = _att_dir
MyMaster.rot += _xscale * 30;


}
if eff_delay == 0 &amp;&amp; _attack_Delay_2 &gt; _attack_Delay_max_2 - 10{
if !(_xscale == 1 &amp;&amp; (_rot_scale == _rot_on + (_rot_on + 180)))
&amp;&amp; !(_xscale == -1 &amp;&amp; (_rot_scale == 0)){
it2 = instance_create(x,y,O_Player_Stick_eff);
it2.MyMaster = self;
it2.sprite_index = sprite_index;
it2.image_angle = image_angle;
it2.image_xscale = check_xscale;
}
eff_delay = 1;
}
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if _attack_Delay &gt; 0{
with(MyMaster){_attackings = 60;}
_attack_Delay -= 1;
}
if _attack_Delay_2 &gt; 0{
with(MyMaster){_attackings = 60;}
_attack_Delay_2 -= 1;
}

if eff_delay &gt; 0{
eff_delay -= 1;
}

img_scales += (1 - img_scales)/10;

if weapon_wheel_delay &gt; 0
weapon_wheel_delay -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if _attack_Delay &lt;= 0 &amp;&amp; _attack_Delay_2 &lt;= 0 &amp;&amp; weapon_wheel_delay &lt;= 0{
if Weapon_hand == 0{
if global.inv_eqmWeapon_ui[1,0] != -1{
if instance_exists(MyClone)
with(MyClone){instance_destroy();}
_Weapon_switch = global.inv_eqmWeapon_ui[1,0];
alarm[0] = 1;
img_scales = 0;
audio_play_sound(Weapon_change_wv,0,0);
Weapon_hand = 1;
}
}
else{
if global.inv_eqmWeapon_ui[0,0] != -1{
if instance_exists(MyClone)
with(MyClone){instance_destroy();}
_Weapon_switch = global.inv_eqmWeapon_ui[0,0];
alarm[0] = 1;
img_scales = 0;
audio_play_sound(Weapon_change_wv,0,0);
Weapon_hand = 0;
}
}
weapon_wheel_delay = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if _attack_Delay &lt;= 0 &amp;&amp; _attack_Delay_2 &lt;= 0 &amp;&amp; weapon_wheel_delay &lt;= 0{
if Weapon_hand == 0{
if global.inv_eqmWeapon_ui[1,0] != -1{

if instance_exists(MyClone)
with(MyClone){instance_destroy();}
_Weapon_switch = global.inv_eqmWeapon_ui[1,0];
alarm[0] = 1;
img_scales = 0;
audio_play_sound(Weapon_change_wv,0,0);
Weapon_hand = 1;

}
}
else{
if global.inv_eqmWeapon_ui[0,0] != -1{
if instance_exists(MyClone)
with(MyClone){instance_destroy();}
_Weapon_switch = global.inv_eqmWeapon_ui[0,0];
alarm[0] = 1;
img_scales = 0;
audio_play_sound(Weapon_change_wv,0,0);
Weapon_hand = 0;
}
}
weapon_wheel_delay = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>_Weapon_switch</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>4</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,0,x,y,_xscale*img_scales,1*img_scales,image_angle,c_white,1);
//draw_set_font(font0)
//draw_text_colour(x,y,string(lengthdir_y(sprite_width*0.4,_xscale*image_angle)),c_red,c_red,c_red,c_red,1);

//draw_set_font(font0)
//draw_text_colour(x,y,string(image_angle+_rot),c_red,c_red,c_red,c_red,1);
/*
draw_rectangle_colour(
x+lengthdir_x(sprite_height*1.2,image_angle+90),
y+lengthdir_y(sprite_height*1.5,image_angle+90),
x,
y,
c_red,c_red,c_red,c_red,0);

//draw_rectangle(x,y,x+lengthdir_x(sprite_height,image_angle+90),y+lengthdir_y(sprite_height,image_angle+90),0)
/*
draw_circle(x+_xscale*lengthdir_x(sprite_width*1.5,image_angle+_xscale*5)+O_Player._xspd*2,
y+lengthdir_y(sprite_width*1.5,_xscale*image_angle+_xscale*5),120,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
