<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_collision_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>active = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_ball">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handler
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_segment">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handler
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_box">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handler
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create physics fixture

phy = physics_fixture_create();
physics_fixture_set_polygon_shape(phy);
// kepp points always clockwise
if (is_clockwise(xx[0], yy[0], xx[1], yy[1], xx[2], yy[2])) {
  physics_fixture_add_point(phy, xx[0]-x, yy[0]-y);
  physics_fixture_add_point(phy, xx[1]-x, yy[1]-y);
  physics_fixture_add_point(phy, xx[2]-x, yy[2]-y);
} else {
  physics_fixture_add_point(phy, xx[2]-x, yy[2]-y);
  physics_fixture_add_point(phy, xx[1]-x, yy[1]-y);
  physics_fixture_add_point(phy, xx[0]-x, yy[0]-y);
}
// set physics properties
physics_fixture_set_density(phy, 0.5);
physics_fixture_set_restitution(phy, 0.1);
physics_fixture_set_collision_group(phy, 0);
physics_fixture_set_linear_damping(phy, 0.1);
physics_fixture_set_angular_damping(phy, 0.1);
physics_fixture_set_friction(phy, 0.2);
physics_fixture_bind(phy, id);
physics_fixture_delete(phy);
phy_rotation = rot;
// create coordinates for drawing
xx[3] = xx[0]-phy_position_x;
yy[3] = yy[0]-phy_position_y;
xx[4] = xx[1]-phy_position_x;
yy[4] = yy[1]-phy_position_y;
xx[5] = xx[2]-phy_position_x;
yy[5] = yy[2]-phy_position_y;
active = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw triangle segment

if (active = 1) {
  draw_set_colour(c_white);
  draw_primitive_begin_texture(pr_trianglestrip, texture);
  dis[0] = point_distance(phy_position_x, phy_position_y, phy_position_x+xx[3], phy_position_y+yy[3]);
  dis[1] = point_distance(phy_position_x, phy_position_y, phy_position_x+xx[4], phy_position_y+yy[4]);
  dis[2] = point_distance(phy_position_x, phy_position_y, phy_position_x+xx[5], phy_position_y+yy[5]);
  dir[0] = point_direction(phy_position_x, phy_position_y, phy_position_x+xx[3], phy_position_y+yy[3]);
  dir[1] = point_direction(phy_position_x, phy_position_y, phy_position_x+xx[4], phy_position_y+yy[4]);
  dir[2] = point_direction(phy_position_x, phy_position_y, phy_position_x+xx[5], phy_position_y+yy[5]);
  draw_vertex_texture(phy_position_x+lengthdir_x(dis[0], dir[0]-phy_rotation), phy_position_y+lengthdir_y(dis[0], dir[0]-phy_rotation), (xx[0]-x_start)/t_w, (yy[0]-y_start)/t_h);
  draw_vertex_texture(phy_position_x+lengthdir_x(dis[1], dir[1]-phy_rotation), phy_position_y+lengthdir_y(dis[1], dir[1]-phy_rotation), (xx[1]-x_start)/t_w, (yy[1]-y_start)/t_h);
  draw_vertex_texture(phy_position_x+lengthdir_x(dis[2], dir[2]-phy_rotation), phy_position_y+lengthdir_y(dis[2], dir[2]-phy_rotation), (xx[2]-x_start)/t_w, (yy[2]-y_start)/t_h);
  draw_primitive_end();
}

/*
For optimising you can draw primitive on surface or D3D model (without enabling d3d mode).
Surfaces are faster, but works very slow and glitchy on android.
Android is okay with D3D but models are harder to transform.
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>0</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
